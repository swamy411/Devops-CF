AWSTemplateFormatVersion: 2010-09-09
Description: This is jenkins deployement

Parameters: 
S3Bucket:
    Type: String
    Default: "lambdatesting8"
  Environment: 
    Type: String
    Default: 'dev'
  LambdaRoleArn:
    Type: String
    Default: 'arn:aws:iam::491655376147:role/dev_ClearExistingExportZip'

Resources:
# Execution role for Lambda functions
  IamLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: !Sub ${ENV}-ClearExistingExportZip
      Policies:
        - PolicyName: !Sub ${ENV}-ClearExistingExportZip-policy         
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  
 
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub  arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ClearExistingExportZip-${ENV}*
                  - !Sub  arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ClearExistingExportZip-${ENV}*:log-stream:*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  ClearExistingExportZip: 
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: ./
      FunctionName: !Sub ${AWS::StackName}-${ENV}-ClearExistingExportZip
      Handler: index.handler
      MemorySize: 1664
      Role: !GetAtt IamLambdaExecutionRole.Arn
      # Role: !Ref LambdaRoleArn
      Runtime: nodejs12.x
      Timeout: 600
      Environment:
        Variables:
          ssm_store: !Sub /${ENV}/
      # VpcConfig:
      #   SecurityGroupIds:
      #     - sg-005a73d593a28e2a0
      #   SubnetIds:
      #     - subnet-06a08a7de749cfd7d
      #     - subnet-02f8f518e75d79ff5
#Uncomment above lines when you are using client account



# Version Publish Function
  LambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: [LambdaRole, Arn]
      Runtime: nodejs12.x
      Code:
        ZipFile: 
          Fn::Sub: |
            var AWS = require('aws-sdk');
            var response = require('cfn-response');
            exports.handler = (event, context) => {
              console.log("Request received:\n", JSON.stringify(event));
              if (event.RequestType == 'Delete') {
                return response.send(event, context, response.SUCCESS);
              }
              // Lambda Versioning
              var lambda = new AWS.Lambda();
              console.log("Before Lambda Version Execution")
              var params = { FunctionName: event.ResourceProperties.FunctionName};
              // [INFO: Publish Version]
              lambda.publishVersion(params).promise().then((data) => {
                console.log("Data:\n", JSON.stringify(data));
                // Lambda Alias
                /*
                1. List All the Aliases Associated with the Function 
                2. Check If the Alias Already Exists !
                3. Create New Alias
                */
                lambda.listAliases(params, function(err, list_alias_data) {
                  if (err) console.log(err, err.stack); 
                  else {
                    console.log(list_alias_data);
                    // 2 . Check If alias Found 
                    alias_found=false;
                    if (list_alias_data && list_alias_data.Aliases) {
                      for (var k in list_alias_data.Aliases) {
                        if (list_alias_data.Aliases[k].Name == event.ResourceProperties.Environment) {
                          alias_found=true;  
                          break;
                        }
                      }
                    } 
                    var alias_params = {
                      FunctionName: event.ResourceProperties.FunctionName,
                      FunctionVersion: data.Version,
                      Name: event.ResourceProperties.Environment
                    };
                    if (alias_found) 
                      lambda.updateAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                    else
                      //create alias
                      lambda.createAlias(alias_params, function(err, aliasdata) {
                        if (err) console.log(err, err.stack);
                        else     console.log(aliasdata);
                        return response.send(event, context, response.SUCCESS, {Version: data.Version}, data.FunctionArn);
                      });
                  }
                });
              }).catch((e) => {
                return response.send(event, context, response.FAILED, e);
              });
            };
